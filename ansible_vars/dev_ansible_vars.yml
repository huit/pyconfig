# sample pyconfig file
# for 'local' run app will read from this file in order to populate OS environment variables
# for all other environments, ansible playbook would create an AWS task definition that would
# then pump these variables and values into the OS Environment for the docker container
#
# for 'target_app_secrets_ref' the task definition will include the lookup keys, which will be
# fulfilled when the task definition is run
target_app_secrets_ref:
  - APIGEE_MACHINE_PASSWORD: apigee-nonprod-common@harvard.edu
    APIGEE_SLACK_API_KEY: adex-apigee-backup-slack-api-key
    API_KEY: adex-api-demo-key
    DB_CONFIG: adex-utilsdb-config-data
target_app_env:
  - name: APIGEE_MACHINE_USERNAME
    value: apigee-nonprod-common@harvard.edu
  - name: APIGEE_ORGANIZATION
    value: harvard-nonprod
  - name: DEBUG
    value: true

target_app_name: django-api
target_app_context: /public/adex/django/v1
target_app_health_check_path: /public/adex/django/v1/health
successful_response_codes: 200-499
target_port: 9103
target_memory_mb: 256